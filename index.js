require('dotenv').config();
const fs = require('fs');
const path = require('path');
const express = require('express');
const { Telegraf, Markup } = require('telegraf');

const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = process.env.ADMIN_ID; // —á–∏—Å–ª–æ–≤–æ–π Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const PORT = process.env.PORT || 3000;

if (!BOT_TOKEN || !ADMIN_ID) {
  console.error('–û—à–∏–±–∫–∞: –∑–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ ADMIN_ID');
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);

const DATA_DIR = __dirname;
const PROFILES_FILE = path.join(DATA_DIR, 'profiles.json');
const SUBSCRIBERS_FILE = path.join(DATA_DIR, 'subscribers.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∫–µ—Ç
let profiles = [];
try {
  profiles = JSON.parse(fs.readFileSync(PROFILES_FILE, 'utf8'));
} catch (e) {
  console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å profiles.json ‚Äî —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –µ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–µ–Ω.');
  profiles = [];
}

// –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫ (—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ)
function loadSubscribers() {
  try {
    return JSON.parse(fs.readFileSync(SUBSCRIBERS_FILE, 'utf8')) || [];
  } catch (e) {
    return [];
  }
}

function saveSubscribers(list) {
  try {
    fs.writeFileSync(SUBSCRIBERS_FILE, JSON.stringify(list, null, 2));
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ subscribers.json', e);
  }
}

let subscribers = loadSubscribers();

// –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
function formatProfile(profile) {
  return `üîπ <b>${profile.name}, ${profile.age} –ª–µ—Ç</b>\n\n${profile.bio}`;
}

function profileKeyboard(index) {
  const p = profiles[index];
  const buttons = [
    [
      Markup.button.callback('–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ üí¨', `start_${index}`),
      Markup.button.url('–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ üîó', p.partner_link)
    ],
    [
      Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', `nav_${(index - 1 + profiles.length) % profiles.length}`),
      Markup.button.callback('–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è', `nav_${(index + 1) % profiles.length}`)
    ],
    [
      Markup.button.callback('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É ‚úâÔ∏è', 'subscribe')
    ]
  ];
  return Markup.inlineKeyboard(buttons);
}

// /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–Ω–∫–µ—Ç
bot.start((ctx) => {
  const welcome = `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name || ''}! –Ø –±–æ—Ç-–∞–Ω–∫–µ—Ç–∞.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚Äî –ø–æ–∫–∞–∂—É –∞–Ω–∫–µ—Ç—ã.`;
  return ctx.reply(welcome, Markup.inlineKeyboard([Markup.button.callback('–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—ã', 'nav_0')]));
});

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∞–Ω–∫–µ—Ç–∞–º
bot.action(/nav_(\d+)/, async (ctx) => {
  const idx = Number(ctx.match[1]);
  if (!profiles[idx]) return ctx.answerCbQuery('–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
  try {
    await ctx.editMessageText(formatProfile(profiles[idx]), {
      parse_mode: 'HTML',
      reply_markup: profileKeyboard(idx).reply_markup
    });
  } catch (e) {
    // –µ—Å–ª–∏ editing –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ), –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
    await ctx.reply(formatProfile(profiles[idx]), { parse_mode: 'HTML', ...profileKeyboard(idx) });
  }
});

// –ù–∞–∂–∞—Ç–∏–µ "–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ" ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
bot.action(/start_(\d+)/, async (ctx) => {
  const idx = Number(ctx.match[1]);
  const p = profiles[idx];
  if (!p) return ctx.answerCbQuery('–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');

  await ctx.answerCbQuery('–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  const user = ctx.from;

  const adminMessage = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>${user.first_name || ''} ${user.last_name || ''}</b> (@${user.username || '---'})\nID: <code>${user.id}</code>\n–•–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∫–µ—Ç–æ–π: <b>${p.name}, ${p.age} –ª–µ—Ç</b>\n–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞: ${p.partner_link}`;

  try {
    await bot.telegram.sendMessage(ADMIN_ID, adminMessage, { parse_mode: 'HTML' });
    await ctx.reply('–°–ø–∞—Å–∏–±–æ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–∏–¥–∏—Ç –∑–∞–ø—Ä–æ—Å –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', e);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
bot.action('subscribe', (ctx) => {
  const id = ctx.from.id;
  if (!subscribers.includes(id)) {
    subscribers.push(id);
    saveSubscribers(subscribers);
    return ctx.answerCbQuery('–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.');
  }
  return ctx.answerCbQuery('–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.');
});

// Admin-only: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
bot.command('broadcast', async (ctx) => {
  if (String(ctx.from.id) !== String(ADMIN_ID)) return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  const text = (ctx.message.text || '').replace('/broadcast', '').trim();
  if (!text) return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast –¢–ï–ö–°–¢_–†–ê–°–°–´–õ–ö–ò');

  let sent = 0;
  for (const chatId of subscribers) {
    try {
      await bot.telegram.sendMessage(chatId, text, { parse_mode: 'HTML' });
      sent++;
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', chatId, e);
    }
  }
  return ctx.reply(`–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${sent} –∏–∑ ${subscribers.length} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.`);
});

// Admin-only: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∞–Ω–∫–µ—Ç—É –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
bot.command('send_profile', async (ctx) => {
  if (String(ctx.from.id) !== String(ADMIN_ID)) return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  const parts = (ctx.message.text || '').split(' ');
  const idx = Number(parts[1]);
  if (Number.isNaN(idx) || !profiles[idx]) return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_profile ID_–∞–Ω–∫–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä /send_profile 0)');

  const text = formatProfile(profiles[idx]);
  let sent = 0;
  for (const chatId of subscribers) {
    try {
      await bot.telegram.sendMessage(chatId, text, { parse_mode: 'HTML', reply_markup: profileKeyboard(idx).reply_markup });
      sent++;
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', chatId, e);
    }
  }
  return ctx.reply(`–ê–Ω–∫–µ—Ç–∞ #${idx} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${sent} –∏–∑ ${subscribers.length} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.`);
});

// Admin-only: –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç
bot.command('list_profiles', (ctx) => {
  if (String(ctx.from.id) !== String(ADMIN_ID)) return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  const list = profiles.map((p, i) => `${i}: ${p.name}, ${p.age} –ª–µ—Ç`).join('\n');
  return ctx.reply(list || '–ê–Ω–∫–µ—Ç –Ω–µ—Ç.');
});

// Express –¥–ª—è health check (Render –æ–∂–∏–¥–∞–µ—Ç –≤–µ–±-–ø—Ä–æ—Ü–µ—Å—Å)
const app = express();
app.get('/', (req, res) => res.send('OK ‚Äî Telegram dating bot is running'));
app.listen(PORT, () => {
  console.log(`Web server listening on port ${PORT}`);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (long polling)
bot.launch().then(() => console.log('Bot started')).catch((e) => console.error(e));

// –ì—Ä–µ–π—Å—Ñ—É–ª-—Å—Ç–æ–ø
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
